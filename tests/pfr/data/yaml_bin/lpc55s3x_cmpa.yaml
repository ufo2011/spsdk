# Copyright 2023-2024 NXP
#
# SPDX-License-Identifier: BSD-3-Clause
# NXP lpc55s3x PFR CMPA configuration
description: # The CMPA configuration description.
  device: lpc55s3x # The NXP device name.
  revision: a1 # The NXP device revision.
  type: CMPA # The PFR type (CMPA, CFPA) or IFR type.
  version: 2.0.0 # The SPSDK tool version.
settings: # The CMPA registers configuration.
  BOOT_CFG: # Boot Configuration
    bitfields: # The register bitfields
      DEFAULT_BOOT_SOURCE: ISP_PIN # Offset: 0b, Width: 3b, Description: Default Boot Source
      # - ISP_PIN, (0): ISP pin source
      # - FLEXSPI_FLASH, (1): FlexSPI flash
      # - SERIAL_ISP_BOOT, (2): Serial ISP boot
      # - INTERNAL_FLASH, (3): Internal Flash
      # - AUTO_BOOT, (4): Auto boot similar to ISP
      # - RESERVED_0, (5): Reserved.
      # - RESERVED_1, (6): Reserved.
      # - RESERVED_2, (7): Reserved.
      DEFAULT_ISP_MODE: AUTO_ISP # Offset: 4b, Width: 3b, Description: Default ISP mode
      # - AUTO_ISP, (0): Auto ISP
      # - USB_HID_MSC, (1): USB HID MSC
      # - UART_ISP, (2): UART ISP
      # - SPI_ISP, (3): SPI Slave ISP
      # - I2C_ISP, (4): I2C Slave ISP
      # - CAN_ISP, (5): CAN ISP
      # - RESERVED, (6): Reserved.
      # - DISABLE_ISP_FALL_THRU, (7): Disable ISP fall through
      BOOT_SPEED: SYS_SPD_CODE # Offset: 7b, Width: 2b, Description: Boot Speed Core Clock
      # - SYS_SPD_CODE, (0): Defined by NMPA[SYSTEM_SPEED_CODE]
      # - MHZ48_FRO, (1): 48MHz FRO
      # - MHZ96_FRO, (2): 96MHz FRO
      # - MHZ150_PLL, (3): 150MHz PLL
      ITRC_ZEROIZE: NO_ACTION # Offset: 19b, Width: 2b, Description: ITRC_ZEROIZE
      # - NO_ACTION, (0): No action
      # - PKC_RAM, (1): Zeroize PKC RAM
      # - A0_RAM, (2): Zeroize low power RAM (AO_RAM)
      # - BOTH_A0_AND_PKC_RAM, (3): Zeroize both AO_RAM and PKC_RAM
      ASRT_FATAL: "0x0" # Offset: 21b, Width: 1b, Description: ASRT_FATAL
      ASRT_RBF: "0x0" # Offset: 22b, Width: 1b, Description: ASRT_RBF
      ASRT_ISPF: "0x0" # Offset: 23b, Width: 1b, Description: ASRT_ISPF
      BOOT_FAILURE_PIN: "0x00" # Offset: 24b, Width: 8b, Description: Boot Failure Pin
  SPI_CAN_CFG: # SPI CAN Configuration
    bitfields: # The register bitfields
      SPI_RECOVERY_BOOT_EN: "0x0" # Offset: 0b, Width: 2b, Description: SPI Recovery Boot Enable
      SPI_REC_IF: HSPI # Offset: 2b, Width: 3b, Description: SPI Recovery Interface
      # - HSPI, (0): HSPI P1_3-MISO, P0_26-MOSI, P1_1-SSEL1, P1_2-SCK
      # - FC0, (1): FC0 P0_30-MISO, P0_24-MOSI, P0_31-SSEL0, P0_28-SCK
      # - FC3, (2): FC3 P0_2-MISO, P0_3-MOSI, P0_4-SSEL0, P0_6-SCK
      # - FC1, (3): FC1 P2_4-MISO, P2_3-MOSI, P2_5-SSEL0, P1_9-SCK
      # - RESERVED_0, (4): Reserved.
      # - RESERVED_1, (5): Reserved.
      # - RESERVED_2, (6): Reserved.
      # - RESERVED_3, (7): Reserved.
      CAN_BAUD_RATE: AUTO_BAUD_DETECT # Offset: 16b, Width: 4b, Description: CAN Baud Rate
      # - AUTO_BAUD_DETECT, (0): Auto baud detection (125K, 250K, 500K, 1M). Default.
      # - KBPS_10, (1): 10 kbp
      # - KBPS_20, (2): 20 kbp
      # - KBPS_50, (3): 50 kbps
      # - KBPS_125, (4): 125 kbps
      # - KBPS_250, (5): 250 kbps
      # - KBPS_500, (6): 500 kbps
      # - KBPS_800, (7): 800 kbps
      # - KBPS_1000, (8): 1,000 kbps
      # - RESERVED_0, (9): Reserved.
      # - RESERVED_1, (10): Reserved.
      # - RESERVED_2, (11): Reserved.
      # - RESERVED_3, (12): Reserved.
      # - RESERVED_4, (13): Reserved.
      # - RESERVED_5, (14): Reserved.
      # - RESERVED_6, (15): Reserved.
  USB_ID: # USB Identifiers
    bitfields: # The register bitfields
      USB_VENDOR_ID: "0x0000" # Offset: 0b, Width: 16b, Description: USB Vendor ID
      USB_PRODUCT_ID: "0x0000" # Offset: 16b, Width: 16b, Description: USB Product ID
  BOOT_TIMEOUT: # Boot Timeout
    bitfields: # The register bitfields
      POWERDOWN_TIMEOUT_SECS: "0x0000" # Offset: 0b, Width: 16b, Description: Powerdown Timeout
      WDOG_TIMEOUT_SECS: "0x0000" # Offset: 16b, Width: 16b, Description: WDOG Timeout
  DCFG_CC_SOCU_PIN: # Device Configuration Credential Constraints for SoC specific Use Pinned. \nCombinations of PIN and DFLT bits and resulting restriction level: \n- PIN=1,DFLT=1: Restriction level 0. Access to the sub-domain is always enabled. This setting is provided for module use case scenario where DCFG_CC_SOCU_NS would be used to define further access restrictions before final deployment of the product. \n- PIN=0,DFLT=0: Restriction level 1. Access to the sub-domain is disabled at startup. But the access can be enabled through the debug authentication process by providing an appropriate Debug Credential (DC) certificate. \n- PIN=0,DFLT=1: Illegal setting. Part may lock-up if this setting is selected. \n- PIN=1,DFLT=0: Restriction level 2. Access to the sub-domain is permanently disabled and cannot be reversed. This setting offers the highest level of restriction.
    bitfields: # The register bitfields
      NIDEN: USE_DAP # Offset: 0b, Width: 1b, Description: Non-secure Non-invasive Debug Enable
      # - USE_DAP, (0): Use DAP to enable
      # - FIXED_STATE, (1): Fixed state
      DBGEN: USE_DAP # Offset: 1b, Width: 1b, Description: Non-secure Debug Enable
      # - USE_DAP, (0): Use DAP to enable
      # - FIXED_STATE, (1): Fixed state
      SPNIDEN: USE_DAP # Offset: 2b, Width: 1b, Description: Secure Non-invasive Debug Enable
      # - USE_DAP, (0): Use DAP to enable
      # - FIXED_STATE, (1): Fixed state
      SPIDEN: USE_DAP # Offset: 3b, Width: 1b, Description: Secure Invasive Debug Enable
      # - USE_DAP, (0): Use DAP to enable
      # - FIXED_STATE, (1): Fixed state
      ISP_CMD_EN: USE_DAP # Offset: 6b, Width: 1b, Description: ISP Boot Command Enable
      # - USE_DAP, (0): Use DAP to enable
      # - FIXED_STATE, (1): Fixed state
      FA_CMD_EN: USE_DAP # Offset: 7b, Width: 1b, Description: FA Command Enable
      # - USE_DAP, (0): Use DAP to enable
      # - FIXED_STATE, (1): Fixed state
      ME_CMD_EN: USE_DAP # Offset: 8b, Width: 1b, Description: Flash Mass Erase Command Enable
      # - USE_DAP, (0): Use DAP to enable
      # - FIXED_STATE, (1): Fixed state
      UUID_CHECK: DISABLED # Offset: 15b, Width: 1b, Description: Enforce UUID match during Debug authentication.
      # - DISABLED, (0): Disabled
      # - ENABLED, (1): Enabled
  DCFG_CC_SOCU_DFLT: # Device Configuration Credential Constraints for SoC specific Use Debug Filter. \nCombinations of PIN and DFLT bits and resulting restriction level: \n- PIN=1,DFLT=1: Restriction level 0. Access to the sub-domain is always enabled. This setting is provided for module use case scenario where DCFG_CC_SOCU_NS would be used to define further access restrictions before final deployment of the product. \n- PIN=0,DFLT=0: Restriction level 1. Access to the sub-domain is disabled at startup. But the access can be enabled through the debug authentication process by providing an appropriate Debug Credential (DC) certificate. \n- PIN=0,DFLT=1: Illegal setting. Part may lock-up if this setting is selected. \n- PIN=1,DFLT=0: Restriction level 2. Access to the sub-domain is permanently disabled and cannot be reversed. This setting offers the highest level of restriction.
    bitfields: # The register bitfields
      NIDEN: DISABLED # Offset: 0b, Width: 1b, Description: Non Secure Non-invasive Debug Fixed State
      # - DISABLED, (0): Disabled
      # - ENABLED, (1): Enabled
      DBGEN: DISABLED # Offset: 1b, Width: 1b, Description: Non-secure Debug Fixed State
      # - DISABLED, (0): Disabled
      # - ENABLED, (1): Enabled
      SPNIDEN: DISABLED # Offset: 2b, Width: 1b, Description: Secure Non-invasive Debug Fixed State
      # - DISABLED, (0): Disabled
      # - ENABLED, (1): Enabled
      SPIDEN: DISABLED # Offset: 3b, Width: 1b, Description: Secure Invasive Debug Fixed State
      # - DISABLED, (0): Disabled
      # - ENABLED, (1): Enabled
      ISP_CMD_EN: DISABLED # Offset: 6b, Width: 1b, Description: ISP Command Fixed State
      # - DISABLED, (0): Disabled
      # - ENABLED, (1): Enabled
      FA_CMD_EN: DISABLED # Offset: 7b, Width: 1b, Description: FA Command Fixed State
      # - DISABLED, (0): Disabled
      # - ENABLED, (1): Enabled
      ME_CMD_EN: DISABLED # Offset: 8b, Width: 1b, Description: Flash Mass Erase Command Fixed State
      # - DISABLED, (0): Disabled
      # - ENABLED, (1): Enabled
  VENDOR_USAGE: # Vendor Usage
    bitfields: # The register bitfields
      VENDOR_USAGE: "0x0000" # Offset: 16b, Width: 16b, Description: Vendor Usage [31:16]
  SECURE_BOOT_CFG: # Secure Boot Configuration
    bitfields: # The register bitfields
      ENF_CNSA: ECC_P256 # Offset: 0b, Width: 2b, Description: Enforce CNSA suite algorithm.
      # - ECC_P256, (0): ECC P-256 keys
      # - ECC_P384_0, (1): ECC P-384 keys, SHA384 and AES256
      # - ECC_P384_1, (2): ECC P-384 keys, SHA384 and AES256
      # - ECC_P384_2, (3): ECC P-384 keys, SHA384 and AES256
      DICE_INC_NXP_CFG: NOT_INCLUDE # Offset: 2b, Width: 2b, Description: Include NXP area in DICE computation.
      # - NOT_INCLUDE, (0): Not included
      # - INCLUDE_0, (1): Included
      # - INCLUDE_1, (2): Included
      # - INCLUDE_2, (3): Included
      DICE_CUST_CFG: NOT_INCLUDE # Offset: 4b, Width: 2b, Description: Include CMPA page and key store area in DICE computation.
      # - NOT_INCLUDE, (0): Not included
      # - INCLUDE_0, (1): Included
      # - INCLUDE_1, (2): Included
      # - INCLUDE_2, (3): Included
      SKIP_DICE: ENABLE_DICE # Offset: 6b, Width: 2b, Description: Skip DICE computation.
      # - ENABLE_DICE, (0): Enable DICE
      # - DISABLE_DICE_0, (1): Disable DICE
      # - DISABLE_DICE_1, (2): Disable DICE
      # - DISABLE_DICE_2, (3): Disable DICE
      ENF_TZM_PRESET: IGNORE # Offset: 8b, Width: 2b, Description: TrustZone-M mode.
      # - IGNORE, (0): Ignored
      # - ENFORCE_0, (1): Enforce preset TZM data in image manifest.
      # - ENFORCE_1, (2): Enforce preset TZM data in image manifest.
      # - ENFORCE_2, (3): Enforce preset TZM data in image manifest.
      BLOCK_SET_KEY: ALLOW # Offset: 10b, Width: 2b, Description: Block PUF key code generation.
      # - ALLOW, (0): Allow PUF Key Code generation
      # - DISABLE_0, (1): Disable PUF Key Code generation
      # - DISABLE_1, (2): Disable PUF Key Code generation
      # - DISABLE_2, (3): Disable PUF Key Code generation
      BLOCK_ENROLL: ALLOW # Offset: 12b, Width: 2b, Description: Block PUF enrollment.
      # - ALLOW, (0): Allow PUF enroll operation
      # - DISABLE_0, (1): Disable PUF enroll operation
      # - DISABLE_1, (2): Disable PUF enroll operation
      # - DISABLE_2, (3): Disable PUF enroll operation
      FIPS_SHA_STEN: NOT_INCLUDE # Offset: 16b, Width: 2b, Description: Enable self-test for SHA2 block on power-up. Needed for FIPS certification. If this field is non-zero run self-test and log result in BOOT_STATE register.
      # - NOT_INCLUDE, (0): Not included
      # - FAILURE_BOOT, (1): On failure continue to boot.
      # - FAILURE_ISP, (2): On failure enter ISP mode for recovery.
      # - FAILURE_ENF_POWER_CYC, (3): On failure lock the device to enforce power-cycle.
      FIPS_AES_STEN: NOT_INCLUDE # Offset: 18b, Width: 2b, Description: Enable self-test for AES block on power-up. Needed for FIPS certification. If this field is non-zero run self-test and log result in BOOT_STATE register.
      # - NOT_INCLUDE, (0): Not included
      # - FAILURE_BOOT, (1): On failure continue to boot.
      # - FAILURE_ISP, (2): On failure enter ISP mode for recovery.
      # - FAILURE_ENF_POWER_CYC, (3): On failure lock the device to enforce power-cycle.
      FIPS_ECDSA_STEN: NOT_INCLUDE # Offset: 20b, Width: 2b, Description: Enable self-test for ECDSA block on power-up. Needed for FIPS certification. If this field is non-zero run self-test and log result in BOOT_STATE register.
      # - NOT_INCLUDE, (0): Not included
      # - FAILURE_BOOT, (1): On failure continue to boot.
      # - FAILURE_ISP, (2): On failure enter ISP mode for recovery.
      # - FAILURE_ENF_POWER_CYC, (3): On failure lock the device to enforce power-cycle.
      FIPS_DRBG_STEN: NOT_INCLUDE # Offset: 22b, Width: 2b, Description: Enable self-test for DRBG block on power-up. Needed for FIPS certification. If this field is non-zero run self-test and log result in BOOT_STATE register.
      # - NOT_INCLUDE, (0): Not included
      # - FAILURE_BOOT, (1): On failure continue to boot.
      # - FAILURE_ISP, (2): On failure enter ISP mode for recovery.
      # - FAILURE_ENF_POWER_CYC, (3): On failure lock the device to enforce power-cycle.
      FIPS_CMAC_STEN: NOT_INCLUDE # Offset: 24b, Width: 2b, Description: Enable self-test for CMAC block on power-up. Needed for FIPS certification. If this field is non-zero run self-test and log result in BOOT_STATE register.
      # - NOT_INCLUDE, (0): Not included
      # - FAILURE_BOOT, (1): On failure continue to boot.
      # - FAILURE_ISP, (2): On failure enter ISP mode for recovery.
      # - FAILURE_ENF_POWER_CYC, (3): On failure lock the device to enforce power-cycle.
      FIPS_KDF_STEN: NOT_INCLUDE # Offset: 26b, Width: 2b, Description: Enable self-test for KDF block on power-up. Needed for FIPS certification. If this field is non-zero run self-test and log result in BOOT_STATE register.
      # - NOT_INCLUDE, (0): Not included
      # - FAILURE_BOOT, (1): On failure continue to boot.
      # - FAILURE_ISP, (2): On failure enter ISP mode for recovery.
      # - FAILURE_ENF_POWER_CYC, (3): On failure lock the device to enforce power-cycle.
      SEC_BOOT_EN: PLAIN_IMAGE # Offset: 30b, Width: 2b, Description: Secure Boot Enable.
      # - PLAIN_IMAGE, (0): Plain image (internal flash with or without CRC)
      # - CMAC_CHECK_IMAGE, (1): Do CMAC checking of image.
      # - ECDSA_CHECK_IMAGE_0, (2): Do complete ECDSA checking of signed images. (internal flash, ECDSA signed)
      # - ECDSA_CHECK_IMAGE_1, (3): Do complete ECDSA checking of signed images. (internal flash, ECDSA signed)
  PRINCE_CONFIG: # Prince Configuration
    bitfields: # The register bitfields
      LOCK_REG0: NOT_LOCKED # Offset: 16b, Width: 2b, Description: Lock Region 0
      # - NOT_LOCKED, (0): Region is not locked.
      # - LOCKED_0, (1): Region is locked.
      # - LOCKED_1, (2): Region is locked.
      # - LOCKED_2, (3): Region is locked.
      LOCK_REG1: NOT_LOCKED # Offset: 18b, Width: 2b, Description: Lock Region 1
      # - NOT_LOCKED, (0): Region is not locked.
      # - LOCKED_0, (1): Region is locked.
      # - LOCKED_1, (2): Region is locked.
      # - LOCKED_2, (3): Region is locked.
      LOCK_REG2: NOT_LOCKED # Offset: 20b, Width: 2b, Description: Lock Region 2
      # - NOT_LOCKED, (0): Region is not locked.
      # - LOCKED_0, (1): Region is locked.
      # - LOCKED_1, (2): Region is locked.
      # - LOCKED_2, (3): Region is locked.
      REG0_ERASE_CHECK_EN: DISABLE # Offset: 24b, Width: 2b, Description: Region 0 Erase Check Enable
      # - DISABLE, (0): Check is disabled
      # - ENABLE_0, (1): Check is enabled
      # - ENABLE_1, (2): Check is enabled
      # - ENABLE_2, (3): Check is enabled
      REG1_ERASE_CHECK_EN: DISABLE # Offset: 26b, Width: 2b, Description: Region 1 Erase Check Enable
      # - DISABLE, (0): Check is disabled
      # - ENABLE_0, (1): Check is enabled
      # - ENABLE_1, (2): Check is enabled
      # - ENABLE_2, (3): Check is enabled
      REG2_ERASE_CHECK_EN: DISABLE # Offset: 28b, Width: 2b, Description: Region 2 Erase Check Enable
      # - DISABLE, (0): Check is disabled
      # - ENABLE_0, (1): Check is enabled
      # - ENABLE_1, (2): Check is enabled
      # - ENABLE_2, (3): Check is enabled
  PRINCE_SR_0: # Region 0, Sub-region Enable
    value: 0x12345678 # The value width: 32b
  PRINCE_SR_1: # Region 1, Sub-region Enable
    value: 0x12345678 # The value width: 32b
  PRINCE_SR_2: # Region 2, Sub-region Enable
    value: 0x12345678 # The value width: 32b
  XTAL_32KHZ_CAPABANK_TRIM: # Xtal 32kHz Capabank Trimming
    bitfields: # The register bitfields
      TRIM_VALID: NOT_VALID # Offset: 0b, Width: 1b, Description: Trim Valid
      # - NOT_VALID, (0): Capa Bank trimmings not valid. Default trimmings value are used.
      # - VALID, (1): Capa Bank trimmings valid.
      XTAL_LOAD_CAP_IEC_PF_X100: "0x00" # Offset: 1b, Width: 10b, Description: XTAL LOAD CAP IEC PF X100
      PCB_XIN_PARA_CAP_PF_X100: "0x00" # Offset: 11b, Width: 10b, Description: PCB XIN PARA CAP PF X100
      PCB_XOUT_PARA_CAP_PF_X100: "0x00" # Offset: 21b, Width: 10b, Description: PCB XOUT PARA CAP PF X100
  XTAL_16MHZ_CAPABANK_TRIM: # Xtal 16MHz Capabank Trimming
    bitfields: # The register bitfields
      TRIM_VALID: NOT_VALID # Offset: 0b, Width: 1b, Description: Trim Valid
      # - NOT_VALID, (0): Capa Bank trimmings not valid. Default trimmings value are used.
      # - VALID, (1): Capa Bank trimmings valid.
      XTAL_LOAD_CAP_IEC_PF_X100: "0x00" # Offset: 1b, Width: 10b, Description: XTAL LOAD CAP IEC PF X100
      PCB_XIN_PARA_CAP_PF_X100: "0x00" # Offset: 11b, Width: 10b, Description: PCB XIN PARA CAP PF X100
      PCB_XOUT_PARA_CAP_PF_X100: "0x00" # Offset: 21b, Width: 10b, Description: PCB XOUT PARA CAP PF X100
  FLASH_REMAP_SIZE: # Flash Remap Size
    value: 0x12345678 # The value width: 32b
  FLASH_REMAP_OFFSET: # Flash Remap Offset
    value: 0x12345678 # The value width: 32b
  PRINCE_XOM_0: # Prince eXecute-Only-Memory (XOM) 0
    value: 0x12345678 # The value width: 32b
  PRINCE_XOM_1: # Prince eXecute-Only-Memory (XOM) 1
    value: 0x12345678 # The value width: 32b
  PRINCE_XOM_2: # Prince eXecute-Only-Memory (XOM) 2
    value: 0x12345678 # The value width: 32b
  RoTK_USAGE: # Root of Trust Key Usage
    bitfields: # The register bitfields
      RoTK0_Usage: USABLE # Offset: 0b, Width: 3b, Description: RoTK0_Usage
      # - USABLE, (0): Usable as debug CA, image CA, FW CA, image and FW key.
      # - DEBUG, (1): Usable as debug CA only.
      # - IMG_BOOT_AND_FW, (2): Usable as image (boot and FW) CA only.
      # - DEBUG_BOOT_FW_IMG, (3): Usable as debug, boot and FW image CA.
      # - IMG_KEY_AND_FW_UPDATE_KEY, (4): Usable as image key and FW update key only.
      # - BOOT_IMAGE_KEY, (5): Usable as boot image key only.
      # - FW_UPDATE_IMG_KEY, (6): Usable as FW update image key only.
      # - KEY_SLOT_NOT_USED, (7): Key slot is not used.
      RoTK1_Usage: USABLE # Offset: 3b, Width: 3b, Description: RoTK1_Usage
      # - USABLE, (0): Usable as debug CA, image CA, FW CA, image and FW key.
      # - DEBUG, (1): Usable as debug CA only.
      # - IMG_BOOT_AND_FW, (2): Usable as image (boot and FW) CA only.
      # - DEBUG_BOOT_FW_IMG, (3): Usable as debug, boot and FW image CA.
      # - IMG_KEY_AND_FW_UPDATE_KEY, (4): Usable as image key and FW update key only.
      # - BOOT_IMAGE_KEY, (5): Usable as boot image key only.
      # - FW_UPDATE_IMG_KEY, (6): Usable as FW update image key only.
      # - KEY_SLOT_NOT_USED, (7): Key slot is not used.
      RoTK2_Usage: USABLE # Offset: 6b, Width: 3b, Description: RoTK2_Usage
      # - USABLE, (0): Usable as debug CA, image CA, FW CA, image and FW key.
      # - DEBUG, (1): Usable as debug CA only.
      # - IMG_BOOT_AND_FW, (2): Usable as image (boot and FW) CA only.
      # - DEBUG_BOOT_FW_IMG, (3): Usable as debug, boot and FW image CA.
      # - IMG_KEY_AND_FW_UPDATE_KEY, (4): Usable as image key and FW update key only.
      # - BOOT_IMAGE_KEY, (5): Usable as boot image key only.
      # - FW_UPDATE_IMG_KEY, (6): Usable as FW update image key only.
      # - KEY_SLOT_NOT_USED, (7): Key slot is not used.
      RoTK3_Usage: USABLE # Offset: 9b, Width: 3b, Description: RoTK3_Usage
      # - USABLE, (0): Usable as debug CA, image CA, FW CA, image and FW key.
      # - DEBUG, (1): Usable as debug CA only.
      # - IMG_BOOT_AND_FW, (2): Usable as image (boot and FW) CA only.
      # - DEBUG_BOOT_FW_IMG, (3): Usable as debug, boot and FW image CA.
      # - IMG_KEY_AND_FW_UPDATE_KEY, (4): Usable as image key and FW update key only.
      # - BOOT_IMAGE_KEY, (5): Usable as boot image key only.
      # - FW_UPDATE_IMG_KEY, (6): Usable as FW update image key only.
      # - KEY_SLOT_NOT_USED, (7): Key slot is not used.
  ROTKH: # ROTKH field is compounded by 12 32-bit fields and contains Root key table hash. For ECC P-256 keys RKTH is a 32-bit SHA-256 digest of four SHA-256 digests computed over four OEM public keys (OEM has four private-public key pairs in case one of its private keys becomes compromised) or in case that ECC P-384 keys are used, RKTH is 48-bit SHA-384 digest.
    value: 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f # The value width: 384b
  FLEXSPI_BOOT_CFG0: # FlexSPI Boot Configuration 0
    bitfields: # The register bitfields
      FLEXSPI_AUTO_PROBE_EN: DISABLE # Offset: 0b, Width: 1b, Description: FLEXSPI_AUTO_PROBE_EN
      # - DISABLE, (0): Disable
      # - ENABLE, (1): Enable
      FLEXSPI_PROBE_TYPE: QUADSPI_NOR # Offset: 1b, Width: 3b, Description: FLEXSPI_PROBE_TYPE
      # - QUADSPI_NOR, (0): QuadSPI NOR
      # - MACRONIX_OCTAL_FLASH, (1): Macronix Octal FLASH
      # - MICRON_OCTAL_FLASH, (2): Micron Octal FLASH
      # - ADESTO_OCTAL_FLASH, (3): Adesto Octal FLASH
      # - RESERVED_0, (4): Reserved.
      # - RESERVED_1, (5): Reserved.
      # - RESERVED_2, (6): Reserved.
      # - RESERVED_3, (7): Reserved.
      FLEXSPI_FLASH_TYPE: QSPI_ADDR_3B # Offset: 4b, Width: 3b, Description: FLEXSPI_FLASH_TYPE
      # - QSPI_ADDR_3B, (0): QSPI_ADDR_3B
      # - RESERVED_0, (1): Reserved.
      # - HYPER_1V8, (2): HYPER_1V8
      # - HYPER_3V3, (3): HYPER_3V3
      # - FlexSPI_DDR_MXIC, (4): FlexSPI_DDR_MXIC
      # - FlexSPI_DDR_MICRON, (5): FlexSPI_DDR_MICRON
      # - RESERVED_1, (6): Reserved.
      # - RESERVED_2, (7): Reserved.
      FLEXSPI_DUMMY_CYCLES: "0x0" # Offset: 7b, Width: 4b, Description: FLEXSPI_DUMMY_CYCLES
      FLEXSPI_FREQUENCY: MHZ_50 # Offset: 11b, Width: 3b, Description: FLEXSPI_FREQUENCY
      # - MHZ_50, (0): 50 Mhz
      # - MHZ_60, (1): 60 Mhz
      # - MHZ_80, (2): 80 Mhz
      # - MHZ_100, (3): 100 Mhz
      # - MHZ_120, (4): 120 Mhz
      # - MHZ_133, (5): 133 Mhz
      # - MHZ_166, (6): 166 Mhz
      # - MHZ_200, (7): 200 Mhz
      FLEXSPI_RESET_ENABLE: NO_RESET # Offset: 14b, Width: 1b, Description: FLEXSPI_RESET_ENABLE
      # - NO_RESET, (0): No Reset(O/QSPI device reset pin is not connected or available.)
      # - ENABLE_RESET, (1): Enable Reset(O/QSPI device reset pin is connected to a GPIO (QSPI_RESET_PIN).)
      FLEXSPI_RESET_GPIO_PORT: "0x0" # Offset: 15b, Width: 3b, Description: FLEXSPI_RESET_ENABLE
      FLEXSPI_RESET_GPIO_PIN: "0x0" # Offset: 18b, Width: 5b, Description: FLEXSPI_RESET_GPIO_PIN
      FLEXSPI_HOLD_TIME: WAIT_500_MICROSECS # Offset: 23b, Width: 2b, Description: FLEXSPI_HOLD TIME
      # - WAIT_500_MICROSECS, (0): Wait for 500 micro seconds
      # - WAIT_1_MILISECS, (1): Wait for 1 mili seconds
      # - WAIT_3_MILISECS, (2): Wait for 3 mili seconds
      # - WAIT_10_MILISECS, (3): Wait for 10 mili seconds
      FLEXSPI_PWR_HOLD_TIME: NO_DELAY # Offset: 25b, Width: 4b, Description: FLEXSPI_PWR_HOLD_TIME
      # - NO_DELAY, (0): No delay
      # - WAIT_100_MICROSECS, (1): Waits additional 100 micro-seconds.
      # - WAIT_500_MICROSECS, (2): Waits additional 500 micro-seconds.
      # - WAIT_1_MILISECS, (3): Waits additional 1 mili-seconds.
      # - WAIT_10_MILISECS, (4): Waits additional 10 mili-seconds.
      # - WAIT_20_MILISECS, (5): Waits additional 20 mili-seconds.
      # - WAIT_40_MILISECS, (6): Waits additional 40 mili-seconds.
      # - WAIT_60_MILISECS, (7): Waits additional 60 mili-seconds.
      # - WAIT_80_MILISECS, (8): Waits additional 80 mili-seconds.
      # - WAIT_100_MILISECS, (9): Waits additional 100 mili-seconds.
      # - WAIT_120_MILISECS, (10): Waits additional 120 mili-seconds.
      # - WAIT_140_MILISECS, (11): Waits additional 140 mili-seconds.
      # - WAIT_160_MILISECS, (12): Waits additional 160 mili-seconds.
      # - WAIT_180_MILISECS, (13): Waits additional 180 mili-seconds.
      # - WAIT_200_MILISECS, (14): Waits additional 200 mili-seconds.
      # - WAIT_220_MILISECS, (15): Waits additional 220 mili-seconds.
      PIN_SLEW_RATE: STANDARD # Offset: 29b, Width: 1b, Description: Enable faster slew rate
      # - STANDARD, (0): Standard slew rate
      # - FASTER, (1): Faster slew rate
  FLEXSPI_BOOT_CFG1: # FlexSPI Boot Configuration 1
    bitfields: # The register bitfields
      FLEXSPI_DELAY_CELL_NUM: "0x0" # Offset: 0b, Width: 7b, Description: FLEXSPI_DELAY_CELL_NUM
      FLEXSPI_IMAGE_OFFSET: "0x00" # Offset: 7b, Width: 10b, Description: FLEXSPI_IMAGE_OFFSET
      FLEXSPI_REMAP_IMAGE_SIZE: SIZE # Offset: 17b, Width: 4b, Description: FLEXSPI_REMAP_IMAGE_SIZE
      # - SIZE, (0): SIZE
      # - SIZE_1MB, (1): SIZE_1MB Size of remapped area is 1MByte.
      # - SIZE_2MB, (2): SIZE_2MB Size of remapped area is 2MByte.
      # - SIZE_3MB, (3): SIZE_3MB Size of remapped area is 3MByte.
      # - SIZE_4MB, (4): SIZE_4MB Size of remapped area is 4MByte.
      # - SIZE_5MB, (5): SIZE_5MB Size of remapped area is 5MByte.
      # - SIZE_6MB, (6): SIZE_6MB Size of remapped area is 6MByte.
      # - SIZE_7MB, (7): SIZE_7MB Size of remapped area is 7MByte.
      # - SIZE_8MB, (8): SIZE_8MB Size of remapped area is 8MByte.
      # - SIZE_9MB, (9): SIZE_9MB Size of remapped area is 9MByte.
      # - SIZE_10MB, (10): SIZE_10MB Size of remapped area is 10MByte.
      # - SIZE_11MB, (11): SIZE_11MB Size of remapped area is 11MByte.
      # - SIZE_12MB, (12): SIZE_12MB Size of remapped area is 12MByte.
      # - SIZE_256KB, (13): SIZE_256KB Size of remapped area is 256KByte.
      # - SIZE_512KB, (14): SIZE_512KB Size of remapped area is 512KByte.
      # - SIZE_768KB, (15): SIZE_768KB Size of remapped area is 768KByte.
  IPED0_START: # IPED region 0 Start
    bitfields: # The register bitfields
      ENABLE_REG0: DISABLED # Offset: 0b, Width: 2b, Description: ENABLE_REG0
      # - DISABLED, (0): Region is disabled
      # - ENABLED, (1): Region is enabled
      # - ENABLED_AND_LOCKED_0, (2): Region is enabled and locked
      # - ENABLED_AND_LOCKED_1, (3): Region is enabled and locked
      IPED_REG0_START_ADDR: "0x000000" # Offset: 8b, Width: 24b, Description: IPED_REG0_START_ADDR
  IPED0_END: # IPED region 0 End
    bitfields: # The register bitfields
      IPED_REG0_END_ADDR: "0x000000" # Offset: 8b, Width: 24b, Description: IPED_REG0_END_ADDR
  IPED1_START: # IPED region 1 Start
    bitfields: # The register bitfields
      ENABLE_REG1: DISABLED # Offset: 0b, Width: 2b, Description: ENABLE_REG1
      # - DISABLED, (0): Region is disabled
      # - ENABLED, (1): Region is enabled
      # - ENABLED_AND_LOCKED_0, (2): Region is enabled and locked
      # - ENABLED_AND_LOCKED_1, (3): Region is enabled and locked
      IPED_REG1_START_ADDR: "0x000000" # Offset: 8b, Width: 24b, Description: IPED_REG1_START_ADDR
  IPED1_END: # IPED region 1 End
    bitfields: # The register bitfields
      IPED_REG1_END_ADDR: "0x000000" # Offset: 8b, Width: 24b, Description: IPED_REG1_END_ADDR
  IPED2_START: # IPED region 2 Start
    bitfields: # The register bitfields
      ENABLE_REG2: DISABLED # Offset: 0b, Width: 2b, Description: ENABLE_REG2
      # - DISABLED, (0): Region is disabled
      # - ENABLED, (1): Region is enabled
      # - ENABLED_AND_LOCKED_0, (2): Region is enabled and locked
      # - ENABLED_AND_LOCKED_1, (3): Region is enabled and locked
      IPED_REG2_START_ADDR: "0x000000" # Offset: 8b, Width: 24b, Description: IPED_REG2_START_ADDR
  IPED2_END: # IPED region 2 End
    bitfields: # The register bitfields
      IPED_REG2_END_ADDR: "0x000000" # Offset: 8b, Width: 24b, Description: IPED_REG2_END_ADDR
  IPED3_START: # IPED region 3 Start
    bitfields: # The register bitfields
      ENABLE_REG3: DISABLED # Offset: 0b, Width: 2b, Description: ENABLE_REG3
      # - DISABLED, (0): Region is disabled
      # - ENABLED, (1): Region is enabled
      # - ENABLED_AND_LOCKED_0, (2): Region is enabled and locked
      # - ENABLED_AND_LOCKED_1, (3): Region is enabled and locked
      IPED_REG3_START_ADDR: "0x000000" # Offset: 8b, Width: 24b, Description: IPED_REG3_START_ADDR
  IPED3_END: # IPED region 3 End
    bitfields: # The register bitfields
      IPED_REG3_END_ADDR: "0x000000" # Offset: 8b, Width: 24b, Description: IPED_REG3_END_ADDR
  QUICK_SET_GPIO_0: # Quick Set to Drive GPIO 0 port pins high
    value: 0x12345678 # The value width: 32b
  QUICK_CLR_GPIO_0: # Quick Clear to Drive GPIO 0 port pins low
    value: 0x12345678 # The value width: 32b
  QUICK_SET_GPIO_1: # Quick Set to Drive GPIO 1 port pins high
    value: 0x12345678 # The value width: 32b
  QUICK_CLR_GPIO_1: # Quick Clear to Drive GPIO 1 port pins low
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED0: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED1: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED2: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED3: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED4: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED5: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED6: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED7: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED8: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED9: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED10: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED11: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED12: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED13: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED14: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED15: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED16: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED17: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED18: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED19: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED20: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED21: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED22: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED23: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED24: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED25: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED26: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED27: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED28: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED29: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED30: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED31: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED32: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED33: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED34: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED35: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED36: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED37: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED38: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED39: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED40: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED41: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED42: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED43: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED44: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED45: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED46: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED47: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED48: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED49: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED50: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED51: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED52: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED53: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED54: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED55: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED56: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED57: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED58: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CUSTOMER_DEFINED59: # Customer Defined (Programmable through ROM API)
    value: 0x12345678 # The value width: 32b
  CMPA_CMAC0: # CMPA CMAC 0
    value: 0x12345678 # The value width: 32b
  CMPA_CMAC1: # CMPA CMAC 1
    value: 0x12345678 # The value width: 32b
  CMPA_CMAC2: # CMPA CMAC 2
    value: 0x12345678 # The value width: 32b
  CMPA_CMAC3: # CMPA CMAC 3
    value: 0x12345678 # The value width: 32b
