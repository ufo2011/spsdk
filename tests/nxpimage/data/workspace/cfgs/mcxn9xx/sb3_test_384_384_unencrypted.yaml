# Copyright 2023 NXP
#
# SPDX-License-Identifier: BSD-3-Clause
# ===========  Secure Binary v3.1 converted config.  ===========
# ----------------------------------------------------------------------------------------------------
#                                         == Basic Settings ==
# ----------------------------------------------------------------------------------------------------
firmwareVersion: '0x1'  # [Optional], Firmware version; Version of application image firmware.
family: mcxn9xx # [Required], MCU family name; Possible options:['k32w1xx', 'kw45xx', 'lpc55s3x', 'mcxn9xx']
containerOutputFile: .\workspace\output_images\mcxn9xx\sb3_test_384_384_unencrypted.sb3 # [Required], SB3 filename; Generated SB3 container filename.
# ----------------------------------------------------------------------------------------------------
#                                    == ISK Certificate Settings ==
# ----------------------------------------------------------------------------------------------------
certBlock: .\workspace\cfgs\cert_block\cert_384_384_data.yaml
signPrivateKey: .\workspace\keys_certs\ec_pk_secp384r1_sign_cert.pem # [Optional], ISK Certificate private key used to sign certificate. It can be replaced by signProvider key.
# ----------------------------------------------------------------------------------------------------
#                                  == Secure Binary v3.1 Settings ==
# ----------------------------------------------------------------------------------------------------
containerKeyBlobEncryptionKey: .\workspace\keys\userkey.txt # [Optional], Part Common Key; Path to PCK/NPK key in plain hex string format.
isNxpContainer: false # [Optional], Enable NXP Container format; Internal usage only, used for generating SB files with NXP content e.g. provisioning firmware, etc...
containerConfigurationWord: '0x0' # [Optional], Container configuration word; Flag value in SB3.1 manifest, not used by silicons with LPC55S3x ROM. Value can be kept 0, or it can be removed from the configuration file.
description: sb3_test_384_384_unencrypted.sb3 # [Optional], Description up to 16 characters, longer will be truncated. Stored in SB3.1 manifest.
# ----------------------------------------------------------------------------------------------------
#                              == Secure Binary v3.1 Commands Settings ==
# ----------------------------------------------------------------------------------------------------
commands: # [Required], SB3.1 Commands; Secure Binary v3.1 commands block, list of all possible options - Modify it according to your application
  - erase:  # [Required], Erase; Performs a flash erase of the given address range. The erase will be rounded up to the sector size.
      address: '0x2588'  # [Required], Address of memory block to be erased.
      size: '0xFFFF' # [Required], Size of memory block to be erased.
      memoryId: '0xA' # [Optional], Memory ID; ID of memory block to be erased.
  - load:  # [Required], Load; If set, then the data to write immediately follows the range header. The length field contains the actual data length
      address: '0x1256'  # [Required], Address of memory block to be loaded.
      file: .\workspace\input_images\test1.bin # [Optional], Binary file to be loaded.
  - load:  # [Required], Load; If set, then the data to write immediately follows the range header. The length field contains the actual data length
      address: '0x2588'  # [Required], Address of memory block to be loaded.
      memoryId: '0xA' # [Optional], Memory ID; ID of memory block to be loaded.
      file: .\workspace\input_images\test2.bin # [Optional], Binary file to be loaded.
      authentication: none # [Optional], Authentication; If authentication is not used, just omit this option or set 'none'; Possible options:['none', 'cmac', 'hashlocking']
  - load:  # [Required], Load; If set, then the data to write immediately follows the range header. The length field contains the actual data length
      address: '0x1256'  # [Required], Address of memory block to be loaded.
      file: .\workspace\input_images\test1.bin # [Optional], Binary file to be loaded.
      authentication: hashlocking # [Optional], Authentication; If authentication is not used, just omit this option or set 'none'; Possible options:['none', 'cmac', 'hashlocking']
  - load:  # [Required], Load; If set, then the data to write immediately follows the range header. The length field contains the actual data length
      address: '0x2588'  # [Required], Address of memory block to be loaded.
      file: .\workspace\input_images\test2.bin # [Optional], Binary file to be loaded.
      authentication: cmac # [Optional], Authentication; If authentication is not used, just omit this option or set 'none'; Possible options:['none', 'cmac', 'hashlocking']
  - loadKeyBlob:  # [Required], Load Key Blob; Wrapped key blob immediately follows the range key blob header. The length field contains the actual data length.
      offset: '0x1256'  # [Required], Offset of the key blob.
      wrappingKeyId: NXP_CUST_KEK_INT_SK # [Required], Wrapping key ID; Wrapping ID of key blob; Possible options:['NXP_CUST_KEK_INT_SK', 'NXP_CUST_KEK_EXT_SK']
      file: .\workspace\input_images\test1.bin # [Required], Binary file to be loaded.
  - loadKeyBlob:  # [Required], Load Key Blob; Wrapped key blob immediately follows the range key blob header. The length field contains the actual data length.
      offset: '0x2588'  # [Required], Offset of the key blob.
      wrappingKeyId: NXP_CUST_KEK_EXT_SK # [Required], Wrapping key ID; Wrapping ID of key blob; Possible options:['NXP_CUST_KEK_INT_SK', 'NXP_CUST_KEK_EXT_SK']
      file: .\workspace\input_images\test2.bin # [Required], Binary file to be loaded.
  - programFuses:  # [Required], Program Fuses; Address is OTP index of fuses to be programmed (Check the reference manual for more information). Values is a comma separated list of 32bit values.
      address: '0x1384'  # [Required], Address; OTP Index of fuses to be programmed. Depends on the chip ROM.
      values: 0x138498, 0x0, 0x5, 0x1ab, 0x1ab, 0xffffffff, 0xfffffff1 # [Required], Binary values; 32bit binary values delimited by comma to be programmed.
  - programFuses:  # [Required], Program Fuses; Address is OTP index of fuses to be programmed (Check the reference manual for more information). Values is a comma separated list of 32bit values.
      address: '0x2588'  # [Required], Address; OTP Index of fuses to be programmed. Depends on the chip ROM.
      values: 0x138498, 0x0, 0x5, 0x1ab, 0x1ab, 0xffffffff, 0xfffffff1 # [Required], Binary values; 32bit binary values delimited by comma to be programmed.
  - programFuses:  # [Required], Program Fuses; Address is OTP index of fuses to be programmed (Check the reference manual for more information). Values is a comma separated list of 32bit values.
      address: '0x2588'  # [Required], Address; OTP Index of fuses to be programmed. Depends on the chip ROM.
      values: 0x138498 # [Required], Binary values; 32bit binary values delimited by comma to be programmed.
  - programIFR:  # [Required], Program IFR; The startAddress will be the address into the IFR region, length will be in number of bytes to write to IFR region. The data to write to IFR region at the given address will immediately follow the header
      address: '0x1384'  # [Required], Address of IFR region to be programmed.
      file: .\workspace\input_ifr\ifr1.bin # [Required], Binary file to be programmed.
  - programIFR:  # [Required], Program IFR; The startAddress will be the address into the IFR region, length will be in number of bytes to write to IFR region. The data to write to IFR region at the given address will immediately follow the header
      address: '0x2588'  # [Required], Address of IFR region to be programmed.
      file: .\workspace\input_ifr\ifr2.bin # [Required], Binary file to be programmed.
  - fillMemory:  # [Required], Fill memory; Used for filling of the memory range by same repeated int32 pattern.
      address: '0x25'  # [Required], Address of memory block to be filled.
      size: '0xFF' # [Required], Size of memory block to be filled.
      pattern: '0xFFFFFFFF' # [Required], Pattern which will be used to fill memory.
  - checkFwVersion:  # [Required], Check firmware version; Used to execute check of provided counter value with value stored in specified monotonous counter in device. If values are not same, SB file is rejected.
      value: '0x1'  # [Required], Value - Firmware version; Firmware version to be compared.
      counterId: nonsecure # [Required], Counter ID; ID of FW counter to be checked; Possible options:['none', 'nonsecure', 'secure', 'radio', 'snt', 'bootloader']
  - checkFwVersion:  # [Required], Check firmware version; Used to execute check of provided counter value with value stored in specified monotonous counter in device. If values are not same, SB file is rejected.
      value: '0x3'  # [Required], Value - Firmware version; Firmware version to be compared.
      counterId: secure # [Required], Counter ID; ID of FW counter to be checked; Possible options:['none', 'nonsecure', 'secure', 'radio', 'snt', 'bootloader']
  - checkFwVersion:  # [Required], Check firmware version; Used to execute check of provided counter value with value stored in specified monotonous counter in device. If values are not same, SB file is rejected.
      value: '0x1'  # [Required], Value - Firmware version; Firmware version to be compared.
      counterId: snt # [Required], Counter ID; ID of FW counter to be checked; Possible options:['none', 'nonsecure', 'secure', 'radio', 'snt', 'bootloader']
  - checkFwVersion:  # [Required], Check firmware version; Used to execute check of provided counter value with value stored in specified monotonous counter in device. If values are not same, SB file is rejected.
      value: '0x3'  # [Required], Value - Firmware version; Firmware version to be compared.
      counterId: radio # [Required], Counter ID; ID of FW counter to be checked; Possible options:['none', 'nonsecure', 'secure', 'radio', 'snt', 'bootloader']
  - checkFwVersion:  # [Required], Check firmware version; Used to execute check of provided counter value with value stored in specified monotonous counter in device. If values are not same, SB file is rejected.
      value: '0x3'  # [Required], Value - Firmware version; Firmware version to be compared.
      counterId: bootloader # [Required], Counter ID; ID of FW counter to be checked; Possible options:['none', 'nonsecure', 'secure', 'radio', 'snt', 'bootloader']
  - execute:  # [Required], Execute; Address is the jump-to address. No further processing of SB after jump, ROM do not expect to return.
      address: '0x1384'  # [Required], Address; Jump-to address to start execute code.
# ----------------------------------------------------------------------------------------------------
#                              == Secure Binary v3.1 Testing Settings ==
# ----------------------------------------------------------------------------------------------------
isEncrypted: false # [Optional], Enable NXP Container encryption; If false, generated SB3.1 blocks are not encrypted, only for testing, ROM won't accept unencrypted SB3.1 file. If option is missing, SB3.1 file is automatically encrypted.
timestamp: '0x123456789abcdef' # [Optional], SB3 file force timestamp; For testing purposes. This option can override real timestamp of SB3 file.
